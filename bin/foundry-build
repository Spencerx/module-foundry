#!/usr/bin/env node

var fs = require('fs'),
    path = require('path'),
    request = require('request');

var optimist = require('optimist')
  .usage('usage: foundry-build -p /path/to/package.json -u http://module-foundry:port')
  .options({
    package: {
      description: 'Path to the package.json to build.',
      alias: 'p',
      string: true
    },
    npm: {
      description: 'npm package to build (e.g. "pg@2.7.0").',
      alias: 'n',
      string: true
    },
    engine: {
      description: 'Version of node.js to request build against.',
      alias: 'e',
      string: true,
      default: '0.8.x'
    },
    input: {
      description: 'Expects streaming input from stdin',
      alias: 'i',
      boolean: true
    },
    url: {
      description: 'URL to the remote module-foundry server',
      alias: 'u',
      string: true,
      demand: true
    },
    remote: {
      description: 'Remote file location to upload to',
      alias: 'r',
      string: true
    },
    file: {
      description: 'Path to local tarball to receive',
      alias: 'f',
      string: true
    },
    command: {
      description: 'npm command to run [build, install]',
      alias: 'c',
      string: true,
      default: 'build'
    },
    help: {
      description: 'Display this message',
      alias: 'h',
      boolean: true
    }
  });

var argv = optimist.argv;
if (argv.help) {
  return optimist.showHelp();
}
else if (['build', 'install'].indexOf(argv.command) === -1) {
  console.log('Error: --command must be build or install');
  return optimist.showHelp();
}

var url = argv.url.replace(/\/$/, '') + '/build',
    query = { 'npm-command': argv.command },
    options,
    build,
    parts,
    pkg,
    res;

if (argv.package) {
  try {
    argv.package = argv.p = path.resolve(argv.package);
    pkg = require(argv.package);
  }
  catch (ex) {
    return console.error('Error parsing ' + argv.package + ': ' + ex.message);
  };
}
else if (argv.npm) {
  parts = argv.npm.split('@');
  argv.file = parts.join('-') + '.tgz';
  pkg = {
    engines: { node: argv.engine },
    repository: {
      type: 'npm',
      package: parts[0],
      version: parts[1]
    }
  };
}
else {
  console.log('Error: -p, -n, or -i are required.');
  return optimist.showHelp();
}

if (argv.input) {
  delete pkg.repository;
}

if (argv.file) {
  query.stream = true;
}

if (argv.remote) {
  pkg.filename = argv.remote;
}

console.log('Requesting: ' + url);
options = {
  method: 'POST',
  url: url,
  qs: query,
  headers: {
    'x-package-json': JSON.stringify(pkg)
  }
};

build = request(options);
if (argv.file) {
  console.log('Streaming output to ' + argv.file);
  build.pipe(fs.createWriteStream(argv.file));
}
else {
  build
    .on('response', function (res) {
      console.log('HTTP status: ' + res.statusCode);
    })
    .on('error', function (err) {
      console.dir(err);
      console.dir(err.stack.split('\n'));
      console.error('Error building module: ' + err.message);
      console.log('')
    })
    .on('end', function () {
      console.log('\nBuild completed!');
      console.log('')
    })
    .pipe(process.stdout)
}

//
// If we should expect data from stdin then
// open to expect it.
//
if (argv.input) {
  process.stdin.resume();
  process.stdin.pipe(build);
}